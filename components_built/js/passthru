#!/usr/bin/env node

// Parse CLI arguments
var opts = require("nomnom")
  .option("debug", {
    flag: true,
    default: false,
    help: "Enable debug mode"
  })
  .option("json", {
    flag: true,
    help: "Print component registration data in JSON"
  })
  .option("port.in", {
    help: "Component input port endpoint"
  })
  .option("port.out", {
    help: "Component out port endpoint"
  })
  .parse();

// Print JSON info if requested
if (opts.json) {
  console.log(
    JSON.stringify({
      description:
        "Forwards received IP to the output without any modifications",
      elementary: true,
      inports: [
        {
          name: "IN",
          type: "all",
          description: "Input port for receiving IPs",
          required: true,
          addressable: false
        }
      ],
      outports: [
        {
          name: "OUT",
          type: "all",
          description: "Output port for sending IPs",
          required: true,
          addressable: false
        }
      ]
    })
  );
  process.exit(0);
}

// Validate port endpoints
if (opts["port.in"] == undefined || opts["port.out"] == undefined) {
  console.log("ERROR: no port endpoints provided!");
  process.exit(1);
}

// Create zmq sockets & run the main loop
var zmq = require("zeromq"),
  receiver = zmq.socket("pull"),
  sender = zmq.socket("push");

receiver.on("message", function() {
  // Note that separate message parts come as function arguments.
  var args = Array.apply(null, arguments);
  process.stdout.write("received: " + args[1].toString());

  // Pass array of strings/buffers to send multipart messages.
  sender.send(args);
  process.stdout.write("done!");
});

receiver.bindSync(opts["port.in"]);
sender.connect(opts["port.out"]);

process.on("SIGINT", function() {
  receiver.close();
  sender.close();
  process.exit(0);
});
